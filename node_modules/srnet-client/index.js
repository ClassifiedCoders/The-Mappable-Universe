module.exports = function(_url){
  this._data = module.exports.Data;
  this._errors = module.exports.errors;
  this.url = new URL(_url);
  this._events = function(name,value=[]){
    if(!Array.isArray(value)) value = [value];
    if(Array.isArray(name)){
      for(var o of name){
        if(this._events[o]) this._events[o](...value);
      }
    }else{
      if(this._events[name]) this._events[name](...value);
    }
  };
  this.on = function(name,value){
    this._events[name] = value;
  }
  this.connect = function(){
    var cli = require(this.url.protocol.replace(/:$/,"")).request(this.url,{
      headers: {
        Connection: "Upgrade",
        Upgrade: "SRNET/2.0",
        Origin: "SRNETClient"
      }
    });
    this._cli = cli;
    cli.send = function(k,v){
      var arr = [];
      while(v.length >= 128){
        var h = v.slice(0,128);
        v = v.slice(128);
        arr.push(h);
      }
      if(v.length != 0) arr.push(v);
      var i = 0;
      var timer = setInterval(()=>{
        cli.socket.write(`FIN=${(i == arr.length - 1 ? 1 : 0)},OP=${k},DATA=${arr[i]}\r\n`);
        i++;
        if(i == arr.length) clearInterval(timer);
      },1);
    };
    this.send = cli.send;
    cli.once("upgrade",(res)=>{
      res.socket.on("data",d=>{
        d += "";
        if(d.startsWith("SRNET/2.0 100 CONNECTED")){
          this.id = d.match(/\(([0-9a-fA-F]+)\)\r\n$/)[1];
          this._cli.on("error",()=>{})
          this._cli.res.socket.on("end",()=>{
            this._events("disconnect");
          });
          this._events(["connect","connection"],this.id);
        }else{
          var data = new this._data(d,cli);
          if(data.type == "RECEIVE"){
            if(data.isError){
              this._events("error",data);
            }else if(data.statusCode >= 100 && data.statusCode < 200){
              this._events("receive",data);
            }else{
              this._events("unknown",data);
            }
            this._events("notAsk",data);
          }else if(data.type == "ASK"){
            this._events("ask",data);
          }
          this._events("data",data);
        }
      });
    });
    cli.end();
  };
};
module.exports.Data = function(data,res){
  data += "";
  var errors = module.exports.errors;
  var _return = function(content){
    if(this.type == "ASK"){
      this.client.send((this.message.split(",")[0] == "SEND" ? "ASK-RET" : "ASK-RET2") + ":" + (this.message.replace(this.message.split(",")[0] + ",","")),content);
    }else{
      throw errors.ReturnError.ex;
    }
  }
  if(data.startsWith("#")){
    var regex = /^#(\d+) ([A-Za-z\-\/ ]+) -> ([\S\s]+)\r\n$/;
    var match = data.match(regex);
    this.statusCode = +match[1];
    this.statusText = match[2];
    this.message = match[3];
    this.type = "RECEIVE";
    this.isError = (+match[1] >= 200 && +match[1] < 300);
    this.return = _return;
  }else if(data.startsWith("<ASK> ")){
    var regex = /^<ASK> ([A-Za-z\-\/]+) \(([0-9a-fA-F:,]+)\)\r\n$/;
    var match = data.match(regex);
    this.statusCode = this.statusText = undefined;
    this.message = match[1] + "," + match[2];
    this.type = "ASK";
    this.isError = undefined;
    this.return = _return;
  }
  this.client = res;
};
module.exports.errors = {};
var error = {"ReturnError": "Calling function `return` when response type isn't ASK"};
for(var o in error){
  module.exports.errors[o] = {
    "constructor": class extends Error {
      constructor(...args){
        super(...args);
        this.name = o;
      }
    }
  };
  module.exports.errors[o].ex = new module.exports.errors[o].constructor(error[o]);
}