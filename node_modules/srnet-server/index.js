// https://srnet-protocol.theforarkld.repl.co/v200
module.exports = function(cmds = {}){
  var Server = function(req,res,next){
    var self = Server;
    if(!req.headers.connection || !req.headers.upgrade){
      next();
      return;
    }
    if(req.headers.connection.toLowerCase() == "upgrade" && req.headers.upgrade.toLowerCase() == "srnet/2.0"){
      res.socket.write("HTTP/1.1 101 Switching Protocols\r\nConnection: Upgrade\r\nUpgrade: SRNET/2.0\r\n\r\n");
      self._.sockets.push(res);
      res.socket.id = self._.random.id.gen(res);
      res.socket.chunk = "";
      res.socket.write("SRNET/2.0 100 CONNECTED (" + res.socket.id + ")\r\n");
      res.socket.on("data",(d)=>{
        d += "";
        d = d.replace(/\r\n$/,"");
        var list = {};
        d.split(/(?<!\\),/).map(x=>x.replace(/\\,/g,",")).map(x=>{
          return {
            type: x.split("=")[0],
            data: x.slice(x.split("=")[0].length + 1)
          };
        }).forEach(x=>{
          list[x.type] = x.data;
        });
        if((list.OP && list.FIN == "1") || list.FIN == "0"){
          if(Buffer.from(list.DATA || "").length > 128){
            res.socket.write("#200 OVERSIZE ERROR -> OPERATION ABORTED\r\n");
          }else{
            if(list.FIN == "0"){
              res.socket.chunk += list.DATA;
              return;
            }else if(list.FIN == "1"){
              res.socket.chunk += list.DATA;
            }
            if(self._.commands[list.OP]){
              self._.sockets = self._.sockets.filter(x=>x.socket.writable);
              var o = {};
              for(var k_ in self._.random.id.keys){
                if(self._.random.id.keys[k_].socket.writable){
                  o[k_] = self._.random.id.keys[k_];
                };
              }
              self._.random.id.keys = o;
              self._.random.id.update();
              self._.commands[list.OP]({
                sender: res,
                sockets: self._.sockets,
                dt: new Date(),
                chunk: res.socket.chunk,
                senderID: res.socket.id
              });
              res.socket.chunk = "";
            }else{
              if(list.OP.startsWith("ASK-RET:")){
                try{
                  self._.random.id.keys[self._.random.ask.keys[list.OP.replace(/^ASK-RET:/,"")]].socket.write("#107 RECEIVE -> " + res.socket.id + ":" + res.socket.chunk + "\r\n");
                  res.socket.chunk = "";
                }catch(e){}
              }else if(list.OP.startsWith("ASK-RET2:")){
                var arr = list.OP.replace(/^ASK-RET2:/,"").split(":");
                try{
                  Server._.random.id.keys[arr[1]].socket.write("#107 RECEIVE -> " + arr[0] + ":" + res.socket.chunk + "\r\n");
                  res.socket.chunk = "";
                }catch(e){}
              }else{
                res.socket.write("#202 UNKNOWN COMMAND ERROR -> OPERATION ABORTED\r\n");
              }
            }
          }
        }else{
          res.socket.write("#201 MISSING OPTION ERROR -> OPERATION ABORTED\r\n");
        }
      });
    }else{
      next();
    }
  };
  function rand(){
    this.list = [];
    this.keys = {};
    this.update = ()=>{
      this.list = Object.keys(this.keys);
    };
    this.gen = (key)=>{
      var r = ()=>{
        var t = "";
        for(var i = 0; i < 16; i++) t += Math.floor(Math.random()*16).toString(16);
        return t;
      };
      var g = r();
      while(this.list.includes(g)) g = r();
      this.list.push(g);
      this.keys[g] = key
      return g;
    };
  }
  Server._ = {
    random: {
      id: new rand(),
      ask: new rand()
    },
    sockets: [],
    error: function(name){
      return class extends Error {
        constructor(...args){
          super(...args);
          this.name = name;
        }
      }
    },
    commands: {
      "0000000": function(obj){
        obj.sender.socket.write("#101 ECHO -> " + obj.chunk + "\r\n");
      },
      "0000001": function(obj){
        obj.sockets.forEach(x=>x.socket.write("#102 BROADCAST -> " + obj.chunk + "\r\n"));
      },
      "0000010": function(obj){
        setTimeout(()=>{
          obj.sender.socket.write("#103 WAIT -> " + obj.chunk + "MS\r\n");
        },+obj.chunk);
      },
      "0000011": function(obj){
        obj.sender.socket.write("#104 DATE/TIME -> " + (obj.dt) + "\r\n");
      },
      "0000100": function(obj){
        obj.sender.socket.end("#105 DISCONNECTING -> DISCONNECTING\r\n");
      },
      "0000101": function(obj){
        obj.sender.socket.write("#106 DISCOVER -> " + Server._.random.id.list.join(":") + "\r\n");
      },
      "0000110": function(obj){
        obj.sender.socket.write("<ASK> SEND (" + Server._.random.ask.gen(obj.chunk) + ")\r\n");
      },
      "0000111": function(obj){
        try{
          Server._.random.id.keys[obj.chunk].socket.write("<ASK> RECV (" + Server._.random.ask.gen(obj.chunk) + ":" + obj.senderID + ")\r\n");
        }catch(e){}
      }
    }
  };
  for(var i in cmds){
    Server._.commands[i] = cmds[i];
  }
  return Server;
};